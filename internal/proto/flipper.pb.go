// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: flipper.proto

package proto

import (
	app "github.com/flipperdevices/go-flipper/internal/proto/app"
	gui "github.com/flipperdevices/go-flipper/internal/proto/gui"
	storage "github.com/flipperdevices/go-flipper/internal/proto/storage"
	system "github.com/flipperdevices/go-flipper/internal/proto/system"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandStatus int32

const (
	CommandStatus_OK CommandStatus = 0
	//*< Common Errors
	CommandStatus_ERROR                                CommandStatus = 1  //*< Unknown error
	CommandStatus_ERROR_DECODE                         CommandStatus = 2  //*< Command can't be decoded successfully - command_id in response may be wrong!
	CommandStatus_ERROR_NOT_IMPLEMENTED                CommandStatus = 3  //*< Command succesfully decoded, but not implemented (deprecated or not yet implemented)
	CommandStatus_ERROR_BUSY                           CommandStatus = 4  //*< Somebody took global lock, so not all commands are available
	CommandStatus_ERROR_CONTINUOUS_COMMAND_INTERRUPTED CommandStatus = 14 //*< Not received has_next == 0
	CommandStatus_ERROR_INVALID_PARAMETERS             CommandStatus = 15 //*< not provided (or provided invalid) crucial parameters to perform rpc
	//*< Storage Errors
	CommandStatus_ERROR_STORAGE_NOT_READY         CommandStatus = 5  //*< FS not ready
	CommandStatus_ERROR_STORAGE_EXIST             CommandStatus = 6  //*< File/Dir alrady exist
	CommandStatus_ERROR_STORAGE_NOT_EXIST         CommandStatus = 7  //*< File/Dir does not exist
	CommandStatus_ERROR_STORAGE_INVALID_PARAMETER CommandStatus = 8  //*< Invalid API parameter
	CommandStatus_ERROR_STORAGE_DENIED            CommandStatus = 9  //*< Access denied
	CommandStatus_ERROR_STORAGE_INVALID_NAME      CommandStatus = 10 //*< Invalid name/path
	CommandStatus_ERROR_STORAGE_INTERNAL          CommandStatus = 11 //*< Internal error
	CommandStatus_ERROR_STORAGE_NOT_IMPLEMENTED   CommandStatus = 12 //*< Functon not implemented
	CommandStatus_ERROR_STORAGE_ALREADY_OPEN      CommandStatus = 13 //*< File/Dir already opened
	CommandStatus_ERROR_STORAGE_DIR_NOT_EMPTY     CommandStatus = 18 //*< Directory, you're going to remove is not empty
	//*< Application Errors
	CommandStatus_ERROR_APP_CANT_START    CommandStatus = 16 //*< Can't start app - internal error
	CommandStatus_ERROR_APP_SYSTEM_LOCKED CommandStatus = 17 //*< Another app is running
	//*< Virtual Display Errors
	CommandStatus_ERROR_VIRTUAL_DISPLAY_ALREADY_STARTED CommandStatus = 19 //*< Virtual Display session can't be started twice
	CommandStatus_ERROR_VIRTUAL_DISPLAY_NOT_STARTED     CommandStatus = 20 //*< Virtual Display session can't be stopped when it's not started
)

// Enum value maps for CommandStatus.
var (
	CommandStatus_name = map[int32]string{
		0:  "OK",
		1:  "ERROR",
		2:  "ERROR_DECODE",
		3:  "ERROR_NOT_IMPLEMENTED",
		4:  "ERROR_BUSY",
		14: "ERROR_CONTINUOUS_COMMAND_INTERRUPTED",
		15: "ERROR_INVALID_PARAMETERS",
		5:  "ERROR_STORAGE_NOT_READY",
		6:  "ERROR_STORAGE_EXIST",
		7:  "ERROR_STORAGE_NOT_EXIST",
		8:  "ERROR_STORAGE_INVALID_PARAMETER",
		9:  "ERROR_STORAGE_DENIED",
		10: "ERROR_STORAGE_INVALID_NAME",
		11: "ERROR_STORAGE_INTERNAL",
		12: "ERROR_STORAGE_NOT_IMPLEMENTED",
		13: "ERROR_STORAGE_ALREADY_OPEN",
		18: "ERROR_STORAGE_DIR_NOT_EMPTY",
		16: "ERROR_APP_CANT_START",
		17: "ERROR_APP_SYSTEM_LOCKED",
		19: "ERROR_VIRTUAL_DISPLAY_ALREADY_STARTED",
		20: "ERROR_VIRTUAL_DISPLAY_NOT_STARTED",
	}
	CommandStatus_value = map[string]int32{
		"OK":                                    0,
		"ERROR":                                 1,
		"ERROR_DECODE":                          2,
		"ERROR_NOT_IMPLEMENTED":                 3,
		"ERROR_BUSY":                            4,
		"ERROR_CONTINUOUS_COMMAND_INTERRUPTED":  14,
		"ERROR_INVALID_PARAMETERS":              15,
		"ERROR_STORAGE_NOT_READY":               5,
		"ERROR_STORAGE_EXIST":                   6,
		"ERROR_STORAGE_NOT_EXIST":               7,
		"ERROR_STORAGE_INVALID_PARAMETER":       8,
		"ERROR_STORAGE_DENIED":                  9,
		"ERROR_STORAGE_INVALID_NAME":            10,
		"ERROR_STORAGE_INTERNAL":                11,
		"ERROR_STORAGE_NOT_IMPLEMENTED":         12,
		"ERROR_STORAGE_ALREADY_OPEN":            13,
		"ERROR_STORAGE_DIR_NOT_EMPTY":           18,
		"ERROR_APP_CANT_START":                  16,
		"ERROR_APP_SYSTEM_LOCKED":               17,
		"ERROR_VIRTUAL_DISPLAY_ALREADY_STARTED": 19,
		"ERROR_VIRTUAL_DISPLAY_NOT_STARTED":     20,
	}
)

func (x CommandStatus) Enum() *CommandStatus {
	p := new(CommandStatus)
	*p = x
	return p
}

func (x CommandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_flipper_proto_enumTypes[0].Descriptor()
}

func (CommandStatus) Type() protoreflect.EnumType {
	return &file_flipper_proto_enumTypes[0]
}

func (x CommandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandStatus.Descriptor instead.
func (CommandStatus) EnumDescriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{0}
}

// There are Server commands (e.g. Storage_write), which have no body message
// in response. But 'oneof' obligate to have at least 1 encoded message
// in scope. For this needs Empty message is implemented.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{0}
}

type StopSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopSession) Reset() {
	*x = StopSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSession) ProtoMessage() {}

func (x *StopSession) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSession.ProtoReflect.Descriptor instead.
func (*StopSession) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{1}
}

type Main struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId     uint32        `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	CommandStatus CommandStatus `protobuf:"varint,2,opt,name=command_status,json=commandStatus,proto3,enum=PB.CommandStatus" json:"command_status,omitempty"`
	HasNext       bool          `protobuf:"varint,3,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// Types that are assignable to Content:
	//	*Main_Empty
	//	*Main_StopSession
	//	*Main_SystemPingRequest
	//	*Main_SystemPingResponse
	//	*Main_SystemRebootRequest
	//	*Main_SystemDeviceInfoRequest
	//	*Main_SystemDeviceInfoResponse
	//	*Main_SystemFactoryResetRequest
	//	*Main_SystemGetDatetimeRequest
	//	*Main_SystemGetDatetimeResponse
	//	*Main_SystemSetDatetimeRequest
	//	*Main_StorageInfoRequest
	//	*Main_StorageInfoResponse
	//	*Main_StorageStatRequest
	//	*Main_StorageStatResponse
	//	*Main_StorageListRequest
	//	*Main_StorageListResponse
	//	*Main_StorageReadRequest
	//	*Main_StorageReadResponse
	//	*Main_StorageWriteRequest
	//	*Main_StorageDeleteRequest
	//	*Main_StorageMkdirRequest
	//	*Main_StorageMd5SumRequest
	//	*Main_StorageMd5SumResponse
	//	*Main_StorageRenameRequest
	//	*Main_AppStartRequest
	//	*Main_AppLockStatusRequest
	//	*Main_AppLockStatusResponse
	//	*Main_GuiStartScreenStreamRequest
	//	*Main_GuiStopScreenStreamRequest
	//	*Main_GuiScreenFrame
	//	*Main_GuiSendInputEventRequest
	//	*Main_GuiStartVirtualDisplayRequest
	//	*Main_GuiStopVirtualDisplayRequest
	Content isMain_Content `protobuf_oneof:"content"`
}

func (x *Main) Reset() {
	*x = Main{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flipper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Main) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Main) ProtoMessage() {}

func (x *Main) ProtoReflect() protoreflect.Message {
	mi := &file_flipper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Main.ProtoReflect.Descriptor instead.
func (*Main) Descriptor() ([]byte, []int) {
	return file_flipper_proto_rawDescGZIP(), []int{2}
}

func (x *Main) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *Main) GetCommandStatus() CommandStatus {
	if x != nil {
		return x.CommandStatus
	}
	return CommandStatus_OK
}

func (x *Main) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (m *Main) GetContent() isMain_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Main) GetEmpty() *Empty {
	if x, ok := x.GetContent().(*Main_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *Main) GetStopSession() *StopSession {
	if x, ok := x.GetContent().(*Main_StopSession); ok {
		return x.StopSession
	}
	return nil
}

func (x *Main) GetSystemPingRequest() *system.PingRequest {
	if x, ok := x.GetContent().(*Main_SystemPingRequest); ok {
		return x.SystemPingRequest
	}
	return nil
}

func (x *Main) GetSystemPingResponse() *system.PingResponse {
	if x, ok := x.GetContent().(*Main_SystemPingResponse); ok {
		return x.SystemPingResponse
	}
	return nil
}

func (x *Main) GetSystemRebootRequest() *system.RebootRequest {
	if x, ok := x.GetContent().(*Main_SystemRebootRequest); ok {
		return x.SystemRebootRequest
	}
	return nil
}

func (x *Main) GetSystemDeviceInfoRequest() *system.DeviceInfoRequest {
	if x, ok := x.GetContent().(*Main_SystemDeviceInfoRequest); ok {
		return x.SystemDeviceInfoRequest
	}
	return nil
}

func (x *Main) GetSystemDeviceInfoResponse() *system.DeviceInfoResponse {
	if x, ok := x.GetContent().(*Main_SystemDeviceInfoResponse); ok {
		return x.SystemDeviceInfoResponse
	}
	return nil
}

func (x *Main) GetSystemFactoryResetRequest() *system.FactoryResetRequest {
	if x, ok := x.GetContent().(*Main_SystemFactoryResetRequest); ok {
		return x.SystemFactoryResetRequest
	}
	return nil
}

func (x *Main) GetSystemGetDatetimeRequest() *system.GetDateTimeRequest {
	if x, ok := x.GetContent().(*Main_SystemGetDatetimeRequest); ok {
		return x.SystemGetDatetimeRequest
	}
	return nil
}

func (x *Main) GetSystemGetDatetimeResponse() *system.GetDateTimeResponse {
	if x, ok := x.GetContent().(*Main_SystemGetDatetimeResponse); ok {
		return x.SystemGetDatetimeResponse
	}
	return nil
}

func (x *Main) GetSystemSetDatetimeRequest() *system.SetDateTimeRequest {
	if x, ok := x.GetContent().(*Main_SystemSetDatetimeRequest); ok {
		return x.SystemSetDatetimeRequest
	}
	return nil
}

func (x *Main) GetStorageInfoRequest() *storage.InfoRequest {
	if x, ok := x.GetContent().(*Main_StorageInfoRequest); ok {
		return x.StorageInfoRequest
	}
	return nil
}

func (x *Main) GetStorageInfoResponse() *storage.InfoResponse {
	if x, ok := x.GetContent().(*Main_StorageInfoResponse); ok {
		return x.StorageInfoResponse
	}
	return nil
}

func (x *Main) GetStorageStatRequest() *storage.StatRequest {
	if x, ok := x.GetContent().(*Main_StorageStatRequest); ok {
		return x.StorageStatRequest
	}
	return nil
}

func (x *Main) GetStorageStatResponse() *storage.StatResponse {
	if x, ok := x.GetContent().(*Main_StorageStatResponse); ok {
		return x.StorageStatResponse
	}
	return nil
}

func (x *Main) GetStorageListRequest() *storage.ListRequest {
	if x, ok := x.GetContent().(*Main_StorageListRequest); ok {
		return x.StorageListRequest
	}
	return nil
}

func (x *Main) GetStorageListResponse() *storage.ListResponse {
	if x, ok := x.GetContent().(*Main_StorageListResponse); ok {
		return x.StorageListResponse
	}
	return nil
}

func (x *Main) GetStorageReadRequest() *storage.ReadRequest {
	if x, ok := x.GetContent().(*Main_StorageReadRequest); ok {
		return x.StorageReadRequest
	}
	return nil
}

func (x *Main) GetStorageReadResponse() *storage.ReadResponse {
	if x, ok := x.GetContent().(*Main_StorageReadResponse); ok {
		return x.StorageReadResponse
	}
	return nil
}

func (x *Main) GetStorageWriteRequest() *storage.WriteRequest {
	if x, ok := x.GetContent().(*Main_StorageWriteRequest); ok {
		return x.StorageWriteRequest
	}
	return nil
}

func (x *Main) GetStorageDeleteRequest() *storage.DeleteRequest {
	if x, ok := x.GetContent().(*Main_StorageDeleteRequest); ok {
		return x.StorageDeleteRequest
	}
	return nil
}

func (x *Main) GetStorageMkdirRequest() *storage.MkdirRequest {
	if x, ok := x.GetContent().(*Main_StorageMkdirRequest); ok {
		return x.StorageMkdirRequest
	}
	return nil
}

func (x *Main) GetStorageMd5SumRequest() *storage.Md5SumRequest {
	if x, ok := x.GetContent().(*Main_StorageMd5SumRequest); ok {
		return x.StorageMd5SumRequest
	}
	return nil
}

func (x *Main) GetStorageMd5SumResponse() *storage.Md5SumResponse {
	if x, ok := x.GetContent().(*Main_StorageMd5SumResponse); ok {
		return x.StorageMd5SumResponse
	}
	return nil
}

func (x *Main) GetStorageRenameRequest() *storage.RenameRequest {
	if x, ok := x.GetContent().(*Main_StorageRenameRequest); ok {
		return x.StorageRenameRequest
	}
	return nil
}

func (x *Main) GetAppStartRequest() *app.StartRequest {
	if x, ok := x.GetContent().(*Main_AppStartRequest); ok {
		return x.AppStartRequest
	}
	return nil
}

func (x *Main) GetAppLockStatusRequest() *app.LockStatusRequest {
	if x, ok := x.GetContent().(*Main_AppLockStatusRequest); ok {
		return x.AppLockStatusRequest
	}
	return nil
}

func (x *Main) GetAppLockStatusResponse() *app.LockStatusResponse {
	if x, ok := x.GetContent().(*Main_AppLockStatusResponse); ok {
		return x.AppLockStatusResponse
	}
	return nil
}

func (x *Main) GetGuiStartScreenStreamRequest() *gui.StartScreenStreamRequest {
	if x, ok := x.GetContent().(*Main_GuiStartScreenStreamRequest); ok {
		return x.GuiStartScreenStreamRequest
	}
	return nil
}

func (x *Main) GetGuiStopScreenStreamRequest() *gui.StopScreenStreamRequest {
	if x, ok := x.GetContent().(*Main_GuiStopScreenStreamRequest); ok {
		return x.GuiStopScreenStreamRequest
	}
	return nil
}

func (x *Main) GetGuiScreenFrame() *gui.ScreenFrame {
	if x, ok := x.GetContent().(*Main_GuiScreenFrame); ok {
		return x.GuiScreenFrame
	}
	return nil
}

func (x *Main) GetGuiSendInputEventRequest() *gui.SendInputEventRequest {
	if x, ok := x.GetContent().(*Main_GuiSendInputEventRequest); ok {
		return x.GuiSendInputEventRequest
	}
	return nil
}

func (x *Main) GetGuiStartVirtualDisplayRequest() *gui.StartVirtualDisplayRequest {
	if x, ok := x.GetContent().(*Main_GuiStartVirtualDisplayRequest); ok {
		return x.GuiStartVirtualDisplayRequest
	}
	return nil
}

func (x *Main) GetGuiStopVirtualDisplayRequest() *gui.StopVirtualDisplayRequest {
	if x, ok := x.GetContent().(*Main_GuiStopVirtualDisplayRequest); ok {
		return x.GuiStopVirtualDisplayRequest
	}
	return nil
}

type isMain_Content interface {
	isMain_Content()
}

type Main_Empty struct {
	Empty *Empty `protobuf:"bytes,4,opt,name=empty,proto3,oneof"`
}

type Main_StopSession struct {
	StopSession *StopSession `protobuf:"bytes,19,opt,name=stop_session,json=stopSession,proto3,oneof"`
}

type Main_SystemPingRequest struct {
	SystemPingRequest *system.PingRequest `protobuf:"bytes,5,opt,name=system_ping_request,json=systemPingRequest,proto3,oneof"`
}

type Main_SystemPingResponse struct {
	SystemPingResponse *system.PingResponse `protobuf:"bytes,6,opt,name=system_ping_response,json=systemPingResponse,proto3,oneof"`
}

type Main_SystemRebootRequest struct {
	SystemRebootRequest *system.RebootRequest `protobuf:"bytes,31,opt,name=system_reboot_request,json=systemRebootRequest,proto3,oneof"`
}

type Main_SystemDeviceInfoRequest struct {
	SystemDeviceInfoRequest *system.DeviceInfoRequest `protobuf:"bytes,32,opt,name=system_device_info_request,json=systemDeviceInfoRequest,proto3,oneof"`
}

type Main_SystemDeviceInfoResponse struct {
	SystemDeviceInfoResponse *system.DeviceInfoResponse `protobuf:"bytes,33,opt,name=system_device_info_response,json=systemDeviceInfoResponse,proto3,oneof"`
}

type Main_SystemFactoryResetRequest struct {
	SystemFactoryResetRequest *system.FactoryResetRequest `protobuf:"bytes,34,opt,name=system_factory_reset_request,json=systemFactoryResetRequest,proto3,oneof"`
}

type Main_SystemGetDatetimeRequest struct {
	SystemGetDatetimeRequest *system.GetDateTimeRequest `protobuf:"bytes,35,opt,name=system_get_datetime_request,json=systemGetDatetimeRequest,proto3,oneof"`
}

type Main_SystemGetDatetimeResponse struct {
	SystemGetDatetimeResponse *system.GetDateTimeResponse `protobuf:"bytes,36,opt,name=system_get_datetime_response,json=systemGetDatetimeResponse,proto3,oneof"`
}

type Main_SystemSetDatetimeRequest struct {
	SystemSetDatetimeRequest *system.SetDateTimeRequest `protobuf:"bytes,37,opt,name=system_set_datetime_request,json=systemSetDatetimeRequest,proto3,oneof"`
}

type Main_StorageInfoRequest struct {
	StorageInfoRequest *storage.InfoRequest `protobuf:"bytes,28,opt,name=storage_info_request,json=storageInfoRequest,proto3,oneof"`
}

type Main_StorageInfoResponse struct {
	StorageInfoResponse *storage.InfoResponse `protobuf:"bytes,29,opt,name=storage_info_response,json=storageInfoResponse,proto3,oneof"`
}

type Main_StorageStatRequest struct {
	StorageStatRequest *storage.StatRequest `protobuf:"bytes,24,opt,name=storage_stat_request,json=storageStatRequest,proto3,oneof"`
}

type Main_StorageStatResponse struct {
	StorageStatResponse *storage.StatResponse `protobuf:"bytes,25,opt,name=storage_stat_response,json=storageStatResponse,proto3,oneof"`
}

type Main_StorageListRequest struct {
	StorageListRequest *storage.ListRequest `protobuf:"bytes,7,opt,name=storage_list_request,json=storageListRequest,proto3,oneof"`
}

type Main_StorageListResponse struct {
	StorageListResponse *storage.ListResponse `protobuf:"bytes,8,opt,name=storage_list_response,json=storageListResponse,proto3,oneof"`
}

type Main_StorageReadRequest struct {
	StorageReadRequest *storage.ReadRequest `protobuf:"bytes,9,opt,name=storage_read_request,json=storageReadRequest,proto3,oneof"`
}

type Main_StorageReadResponse struct {
	StorageReadResponse *storage.ReadResponse `protobuf:"bytes,10,opt,name=storage_read_response,json=storageReadResponse,proto3,oneof"`
}

type Main_StorageWriteRequest struct {
	StorageWriteRequest *storage.WriteRequest `protobuf:"bytes,11,opt,name=storage_write_request,json=storageWriteRequest,proto3,oneof"`
}

type Main_StorageDeleteRequest struct {
	StorageDeleteRequest *storage.DeleteRequest `protobuf:"bytes,12,opt,name=storage_delete_request,json=storageDeleteRequest,proto3,oneof"`
}

type Main_StorageMkdirRequest struct {
	StorageMkdirRequest *storage.MkdirRequest `protobuf:"bytes,13,opt,name=storage_mkdir_request,json=storageMkdirRequest,proto3,oneof"`
}

type Main_StorageMd5SumRequest struct {
	StorageMd5SumRequest *storage.Md5SumRequest `protobuf:"bytes,14,opt,name=storage_md5sum_request,json=storageMd5sumRequest,proto3,oneof"`
}

type Main_StorageMd5SumResponse struct {
	StorageMd5SumResponse *storage.Md5SumResponse `protobuf:"bytes,15,opt,name=storage_md5sum_response,json=storageMd5sumResponse,proto3,oneof"`
}

type Main_StorageRenameRequest struct {
	StorageRenameRequest *storage.RenameRequest `protobuf:"bytes,30,opt,name=storage_rename_request,json=storageRenameRequest,proto3,oneof"`
}

type Main_AppStartRequest struct {
	AppStartRequest *app.StartRequest `protobuf:"bytes,16,opt,name=app_start_request,json=appStartRequest,proto3,oneof"`
}

type Main_AppLockStatusRequest struct {
	AppLockStatusRequest *app.LockStatusRequest `protobuf:"bytes,17,opt,name=app_lock_status_request,json=appLockStatusRequest,proto3,oneof"`
}

type Main_AppLockStatusResponse struct {
	AppLockStatusResponse *app.LockStatusResponse `protobuf:"bytes,18,opt,name=app_lock_status_response,json=appLockStatusResponse,proto3,oneof"`
}

type Main_GuiStartScreenStreamRequest struct {
	GuiStartScreenStreamRequest *gui.StartScreenStreamRequest `protobuf:"bytes,20,opt,name=gui_start_screen_stream_request,json=guiStartScreenStreamRequest,proto3,oneof"`
}

type Main_GuiStopScreenStreamRequest struct {
	GuiStopScreenStreamRequest *gui.StopScreenStreamRequest `protobuf:"bytes,21,opt,name=gui_stop_screen_stream_request,json=guiStopScreenStreamRequest,proto3,oneof"`
}

type Main_GuiScreenFrame struct {
	GuiScreenFrame *gui.ScreenFrame `protobuf:"bytes,22,opt,name=gui_screen_frame,json=guiScreenFrame,proto3,oneof"`
}

type Main_GuiSendInputEventRequest struct {
	GuiSendInputEventRequest *gui.SendInputEventRequest `protobuf:"bytes,23,opt,name=gui_send_input_event_request,json=guiSendInputEventRequest,proto3,oneof"`
}

type Main_GuiStartVirtualDisplayRequest struct {
	GuiStartVirtualDisplayRequest *gui.StartVirtualDisplayRequest `protobuf:"bytes,26,opt,name=gui_start_virtual_display_request,json=guiStartVirtualDisplayRequest,proto3,oneof"`
}

type Main_GuiStopVirtualDisplayRequest struct {
	GuiStopVirtualDisplayRequest *gui.StopVirtualDisplayRequest `protobuf:"bytes,27,opt,name=gui_stop_virtual_display_request,json=guiStopVirtualDisplayRequest,proto3,oneof"`
}

func (*Main_Empty) isMain_Content() {}

func (*Main_StopSession) isMain_Content() {}

func (*Main_SystemPingRequest) isMain_Content() {}

func (*Main_SystemPingResponse) isMain_Content() {}

func (*Main_SystemRebootRequest) isMain_Content() {}

func (*Main_SystemDeviceInfoRequest) isMain_Content() {}

func (*Main_SystemDeviceInfoResponse) isMain_Content() {}

func (*Main_SystemFactoryResetRequest) isMain_Content() {}

func (*Main_SystemGetDatetimeRequest) isMain_Content() {}

func (*Main_SystemGetDatetimeResponse) isMain_Content() {}

func (*Main_SystemSetDatetimeRequest) isMain_Content() {}

func (*Main_StorageInfoRequest) isMain_Content() {}

func (*Main_StorageInfoResponse) isMain_Content() {}

func (*Main_StorageStatRequest) isMain_Content() {}

func (*Main_StorageStatResponse) isMain_Content() {}

func (*Main_StorageListRequest) isMain_Content() {}

func (*Main_StorageListResponse) isMain_Content() {}

func (*Main_StorageReadRequest) isMain_Content() {}

func (*Main_StorageReadResponse) isMain_Content() {}

func (*Main_StorageWriteRequest) isMain_Content() {}

func (*Main_StorageDeleteRequest) isMain_Content() {}

func (*Main_StorageMkdirRequest) isMain_Content() {}

func (*Main_StorageMd5SumRequest) isMain_Content() {}

func (*Main_StorageMd5SumResponse) isMain_Content() {}

func (*Main_StorageRenameRequest) isMain_Content() {}

func (*Main_AppStartRequest) isMain_Content() {}

func (*Main_AppLockStatusRequest) isMain_Content() {}

func (*Main_AppLockStatusResponse) isMain_Content() {}

func (*Main_GuiStartScreenStreamRequest) isMain_Content() {}

func (*Main_GuiStopScreenStreamRequest) isMain_Content() {}

func (*Main_GuiScreenFrame) isMain_Content() {}

func (*Main_GuiSendInputEventRequest) isMain_Content() {}

func (*Main_GuiStartVirtualDisplayRequest) isMain_Content() {}

func (*Main_GuiStopVirtualDisplayRequest) isMain_Content() {}

var File_flipper_proto protoreflect.FileDescriptor

var file_flipper_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x50, 0x42, 0x1a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x67, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x17, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x42, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x42, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x13,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x42, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x42, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x42,
	0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50,
	0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x42,
	0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x42, 0x5f, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50,
	0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x64, 0x35, 0x73, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x73,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x64, 0x35, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x42, 0x5f, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a,
	0x17, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x42, 0x5f, 0x41, 0x70, 0x70, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x61, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1f, 0x67, 0x75, 0x69, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x67, 0x75, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x65, 0x0a, 0x1e, 0x67, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x50, 0x42, 0x5f,
	0x47, 0x75, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x67,
	0x75, 0x69, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x67, 0x75, 0x69,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x1c, 0x67, 0x75,
	0x69, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x18, 0x67, 0x75, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x21, 0x67,
	0x75, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x75,
	0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x20, 0x67,
	0x75, 0x69, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x42, 0x5f, 0x47, 0x75, 0x69, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x75, 0x69, 0x53,
	0x74, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2a, 0xe2, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42,
	0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x0f, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x49, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x12, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x41, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x13, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x14, 0x42, 0x1d, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flipper_proto_rawDescOnce sync.Once
	file_flipper_proto_rawDescData = file_flipper_proto_rawDesc
)

func file_flipper_proto_rawDescGZIP() []byte {
	file_flipper_proto_rawDescOnce.Do(func() {
		file_flipper_proto_rawDescData = protoimpl.X.CompressGZIP(file_flipper_proto_rawDescData)
	})
	return file_flipper_proto_rawDescData
}

var file_flipper_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flipper_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_flipper_proto_goTypes = []interface{}{
	(CommandStatus)(0),                     // 0: PB.CommandStatus
	(*Empty)(nil),                          // 1: PB.Empty
	(*StopSession)(nil),                    // 2: PB.StopSession
	(*Main)(nil),                           // 3: PB.Main
	(*system.PingRequest)(nil),             // 4: PB_System.PingRequest
	(*system.PingResponse)(nil),            // 5: PB_System.PingResponse
	(*system.RebootRequest)(nil),           // 6: PB_System.RebootRequest
	(*system.DeviceInfoRequest)(nil),       // 7: PB_System.DeviceInfoRequest
	(*system.DeviceInfoResponse)(nil),      // 8: PB_System.DeviceInfoResponse
	(*system.FactoryResetRequest)(nil),     // 9: PB_System.FactoryResetRequest
	(*system.GetDateTimeRequest)(nil),      // 10: PB_System.GetDateTimeRequest
	(*system.GetDateTimeResponse)(nil),     // 11: PB_System.GetDateTimeResponse
	(*system.SetDateTimeRequest)(nil),      // 12: PB_System.SetDateTimeRequest
	(*storage.InfoRequest)(nil),            // 13: PB_Storage.InfoRequest
	(*storage.InfoResponse)(nil),           // 14: PB_Storage.InfoResponse
	(*storage.StatRequest)(nil),            // 15: PB_Storage.StatRequest
	(*storage.StatResponse)(nil),           // 16: PB_Storage.StatResponse
	(*storage.ListRequest)(nil),            // 17: PB_Storage.ListRequest
	(*storage.ListResponse)(nil),           // 18: PB_Storage.ListResponse
	(*storage.ReadRequest)(nil),            // 19: PB_Storage.ReadRequest
	(*storage.ReadResponse)(nil),           // 20: PB_Storage.ReadResponse
	(*storage.WriteRequest)(nil),           // 21: PB_Storage.WriteRequest
	(*storage.DeleteRequest)(nil),          // 22: PB_Storage.DeleteRequest
	(*storage.MkdirRequest)(nil),           // 23: PB_Storage.MkdirRequest
	(*storage.Md5SumRequest)(nil),          // 24: PB_Storage.Md5sumRequest
	(*storage.Md5SumResponse)(nil),         // 25: PB_Storage.Md5sumResponse
	(*storage.RenameRequest)(nil),          // 26: PB_Storage.RenameRequest
	(*app.StartRequest)(nil),               // 27: PB_App.StartRequest
	(*app.LockStatusRequest)(nil),          // 28: PB_App.LockStatusRequest
	(*app.LockStatusResponse)(nil),         // 29: PB_App.LockStatusResponse
	(*gui.StartScreenStreamRequest)(nil),   // 30: PB_Gui.StartScreenStreamRequest
	(*gui.StopScreenStreamRequest)(nil),    // 31: PB_Gui.StopScreenStreamRequest
	(*gui.ScreenFrame)(nil),                // 32: PB_Gui.ScreenFrame
	(*gui.SendInputEventRequest)(nil),      // 33: PB_Gui.SendInputEventRequest
	(*gui.StartVirtualDisplayRequest)(nil), // 34: PB_Gui.StartVirtualDisplayRequest
	(*gui.StopVirtualDisplayRequest)(nil),  // 35: PB_Gui.StopVirtualDisplayRequest
}
var file_flipper_proto_depIdxs = []int32{
	0,  // 0: PB.Main.command_status:type_name -> PB.CommandStatus
	1,  // 1: PB.Main.empty:type_name -> PB.Empty
	2,  // 2: PB.Main.stop_session:type_name -> PB.StopSession
	4,  // 3: PB.Main.system_ping_request:type_name -> PB_System.PingRequest
	5,  // 4: PB.Main.system_ping_response:type_name -> PB_System.PingResponse
	6,  // 5: PB.Main.system_reboot_request:type_name -> PB_System.RebootRequest
	7,  // 6: PB.Main.system_device_info_request:type_name -> PB_System.DeviceInfoRequest
	8,  // 7: PB.Main.system_device_info_response:type_name -> PB_System.DeviceInfoResponse
	9,  // 8: PB.Main.system_factory_reset_request:type_name -> PB_System.FactoryResetRequest
	10, // 9: PB.Main.system_get_datetime_request:type_name -> PB_System.GetDateTimeRequest
	11, // 10: PB.Main.system_get_datetime_response:type_name -> PB_System.GetDateTimeResponse
	12, // 11: PB.Main.system_set_datetime_request:type_name -> PB_System.SetDateTimeRequest
	13, // 12: PB.Main.storage_info_request:type_name -> PB_Storage.InfoRequest
	14, // 13: PB.Main.storage_info_response:type_name -> PB_Storage.InfoResponse
	15, // 14: PB.Main.storage_stat_request:type_name -> PB_Storage.StatRequest
	16, // 15: PB.Main.storage_stat_response:type_name -> PB_Storage.StatResponse
	17, // 16: PB.Main.storage_list_request:type_name -> PB_Storage.ListRequest
	18, // 17: PB.Main.storage_list_response:type_name -> PB_Storage.ListResponse
	19, // 18: PB.Main.storage_read_request:type_name -> PB_Storage.ReadRequest
	20, // 19: PB.Main.storage_read_response:type_name -> PB_Storage.ReadResponse
	21, // 20: PB.Main.storage_write_request:type_name -> PB_Storage.WriteRequest
	22, // 21: PB.Main.storage_delete_request:type_name -> PB_Storage.DeleteRequest
	23, // 22: PB.Main.storage_mkdir_request:type_name -> PB_Storage.MkdirRequest
	24, // 23: PB.Main.storage_md5sum_request:type_name -> PB_Storage.Md5sumRequest
	25, // 24: PB.Main.storage_md5sum_response:type_name -> PB_Storage.Md5sumResponse
	26, // 25: PB.Main.storage_rename_request:type_name -> PB_Storage.RenameRequest
	27, // 26: PB.Main.app_start_request:type_name -> PB_App.StartRequest
	28, // 27: PB.Main.app_lock_status_request:type_name -> PB_App.LockStatusRequest
	29, // 28: PB.Main.app_lock_status_response:type_name -> PB_App.LockStatusResponse
	30, // 29: PB.Main.gui_start_screen_stream_request:type_name -> PB_Gui.StartScreenStreamRequest
	31, // 30: PB.Main.gui_stop_screen_stream_request:type_name -> PB_Gui.StopScreenStreamRequest
	32, // 31: PB.Main.gui_screen_frame:type_name -> PB_Gui.ScreenFrame
	33, // 32: PB.Main.gui_send_input_event_request:type_name -> PB_Gui.SendInputEventRequest
	34, // 33: PB.Main.gui_start_virtual_display_request:type_name -> PB_Gui.StartVirtualDisplayRequest
	35, // 34: PB.Main.gui_stop_virtual_display_request:type_name -> PB_Gui.StopVirtualDisplayRequest
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_flipper_proto_init() }
func file_flipper_proto_init() {
	if File_flipper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flipper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flipper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flipper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Main); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flipper_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Main_Empty)(nil),
		(*Main_StopSession)(nil),
		(*Main_SystemPingRequest)(nil),
		(*Main_SystemPingResponse)(nil),
		(*Main_SystemRebootRequest)(nil),
		(*Main_SystemDeviceInfoRequest)(nil),
		(*Main_SystemDeviceInfoResponse)(nil),
		(*Main_SystemFactoryResetRequest)(nil),
		(*Main_SystemGetDatetimeRequest)(nil),
		(*Main_SystemGetDatetimeResponse)(nil),
		(*Main_SystemSetDatetimeRequest)(nil),
		(*Main_StorageInfoRequest)(nil),
		(*Main_StorageInfoResponse)(nil),
		(*Main_StorageStatRequest)(nil),
		(*Main_StorageStatResponse)(nil),
		(*Main_StorageListRequest)(nil),
		(*Main_StorageListResponse)(nil),
		(*Main_StorageReadRequest)(nil),
		(*Main_StorageReadResponse)(nil),
		(*Main_StorageWriteRequest)(nil),
		(*Main_StorageDeleteRequest)(nil),
		(*Main_StorageMkdirRequest)(nil),
		(*Main_StorageMd5SumRequest)(nil),
		(*Main_StorageMd5SumResponse)(nil),
		(*Main_StorageRenameRequest)(nil),
		(*Main_AppStartRequest)(nil),
		(*Main_AppLockStatusRequest)(nil),
		(*Main_AppLockStatusResponse)(nil),
		(*Main_GuiStartScreenStreamRequest)(nil),
		(*Main_GuiStopScreenStreamRequest)(nil),
		(*Main_GuiScreenFrame)(nil),
		(*Main_GuiSendInputEventRequest)(nil),
		(*Main_GuiStartVirtualDisplayRequest)(nil),
		(*Main_GuiStopVirtualDisplayRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flipper_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flipper_proto_goTypes,
		DependencyIndexes: file_flipper_proto_depIdxs,
		EnumInfos:         file_flipper_proto_enumTypes,
		MessageInfos:      file_flipper_proto_msgTypes,
	}.Build()
	File_flipper_proto = out.File
	file_flipper_proto_rawDesc = nil
	file_flipper_proto_goTypes = nil
	file_flipper_proto_depIdxs = nil
}
